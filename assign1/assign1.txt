Assign1: Due 11:59PM February 23

***Your chance of success greatly increases if you start very early. Your chance of failure increases if you start late.

Take small steps, ask for frequent reviews, make use of the daily reviews. You don't have to do anything big or special for review. Whatever you are able to do in a day, ask for that to be reviewed.

Using Test First Development (no code without test first) implement the problem you designed in hw2. Feel free to evolve that design and use your judgment to make changes based on the improved understanding and learning.

First start with a tests list and a canary test.

After completing the assignment (and only after) answer the following questions:

1. What did you learn mainly in this assignment?

We learned how useful it can be to run unit tests before implementing code. It was notably difficult to unlearn the code-first mentality. We both had situations where we implemented code first, just to have to discard it and start over with the tests first. As we progressed, it quickly became obvious how helpful the tests were in ensuring old code still worked, and locating where errors were between revisions. We are looking forward to better understanding TDD, and how to effectively implement its features.

2. How is your current design different, if at all, from the strategic design created in hw2?

Our design went through a complete overhaul. We dropped all of our ideas for inheritance and interfaces. Our 3 planned classes were combined into 1 Mastermind class, and it ended up fewer than 100 lines. The termination of the program was handled in the GUI instead of the Mastermind class. The GUI is the only idea that is stayed intact between its design and implementation. 

3. Were there any surprises or things you did not expect along the way? Any 
particular problem faced, things you had to tackle that you did not expect 
beforehand?

The GUI was more challenging than we anticipated. Ben had intro-level skill, and Corbin had none. Our experience with creating this GUI took much trial and error. Our game grid was canvas drawn with math functions. The Swing environment was very messy as we experimented with different layouts.

It was exciting to see different views on how coding can be optimized. We made attempts to make our code more readable, or to express it in fewer lines when time permitted. With the reviews, we would learn that the optimization could be taken to another level. 20 lines could be compacted into 8! It was interesting to dissect the code recommended to us, and add it to our options for the future.

It was especially surpising how the main function did not exist until we were nearly done with the project! Prior to TDD, it seemed as though the main would be the first or second function implemented in every program.

Total [100]: 95
Program runs [10]:
Game works as expected [10]:
All tests pass [20]:
Test quality [15]:
Test for randomness [5]:
Code coverage [10]:

Code quality [10]: -3
GUI contains very long methods. As good practitioners in our field we should not do that.


Design quality [10]: -2
	generateRandomColors is way too complex, need to simplify it.

Response to questions [10]:
